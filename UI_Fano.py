# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_Fano.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from collections import Counter
import numpy as np

class Ui_UI_Fano(object):
    def setupUi(self, UI_Fano):
        UI_Fano.setObjectName("UI_Fano")
        UI_Fano.resize(900, 720)
        self.TITLE = QtWidgets.QLabel(UI_Fano)
        self.TITLE.setGeometry(QtCore.QRect(200, 30, 480, 100))
        self.TITLE.setObjectName("TITLE")
        self.Back_to_Start_button = QtWidgets.QPushButton(UI_Fano)
        self.Back_to_Start_button.setGeometry(QtCore.QRect(740, 550, 150, 90))
        self.Back_to_Start_button.setObjectName("Back_to_Start_button")
        self.Input_Symbol_textedit = QtWidgets.QTextEdit(UI_Fano)
        self.Input_Symbol_textedit.setGeometry(QtCore.QRect(40, 190, 671, 60))
        self.Input_Symbol_textedit.setObjectName("Input_Symbol_textedit")
        self.Input_Q_hint = QtWidgets.QLabel(UI_Fano)
        self.Input_Q_hint.setGeometry(QtCore.QRect(50, 130, 191, 50))
        self.Input_Q_hint.setObjectName("Input_Q_hint")
        self.Generate_button = QtWidgets.QPushButton(UI_Fano)
        self.Generate_button.setGeometry(QtCore.QRect(740, 400, 150, 90))
        self.Generate_button.setObjectName("Generate_button")
        self.Output_textbrowser = QtWidgets.QTextBrowser(UI_Fano)
        self.Output_textbrowser.setGeometry(QtCore.QRect(40, 310, 671, 381))
        self.Output_textbrowser.setObjectName("Output_textbrowser")
        self.Output_hint = QtWidgets.QLabel(UI_Fano)
        self.Output_hint.setGeometry(QtCore.QRect(140, 270, 471, 41))
        self.Output_hint.setObjectName("Output_hint")

        self.retranslateUi(UI_Fano)
        QtCore.QMetaObject.connectSlotsByName(UI_Fano)

        # 返回按钮点下回到start界面
        self.Back_to_Start_button.clicked.connect(self.backToStart)
        # 生成按钮事件
        self.Generate_button.clicked.connect(self.display)

    def backToStart(self):
        from start import Ui_Form
        self.start_window = QtWidgets.QMainWindow()
        self.ui = Ui_Form()
        self.ui.setupUi(self.start_window)
        self.start_window.show()
        QtWidgets.QWidget.close(self.Back_to_Start_button.window())

    def display(self):
        import Fano_Coding as F
        #检查Symbols输入
        Input_Symbols = self.Input_Symbol_textedit.toPlainText()
        if len(Input_Symbols) >= 10:
            Input_Symbols = Input_Symbols
        else:
            self.Output_textbrowser.setText("注意输入符号的长度Q的范围！")
            return

        #输入检查完毕，开始计算Fano编码以及各项指标
        symbol_probabilities = sort_symbol(Input_Symbols)
        #1.Fano码表

        Fano_table = F.fano_encode(symbol_probabilities)
        #对照Fano码表进行编码
        Symbols_After_Fano_Encoding = []
        for i in Input_Symbols:
            for symbol, fano_code in Fano_table.items():
                if i == symbol:
                    Symbols_After_Fano_Encoding.append(fano_code)

        Aver_len_F = F.aver_code_length(symbol_probabilities)
        # 3.计算并打印信息熵以及编码效率
        Info_Entropy_F = F.Entropy(symbol_probabilities)
        Ave_l_lbr_F = Aver_len_F * np.log2(2)
        Encoding_Efficiency_F = Info_Entropy_F / Ave_l_lbr_F

        # 将文本设置到输出框中
        output_text = f"{'Fano编码表如下：'}\n{Fano_table}\n\n{'经过Fano编码后的信息:'}\n{Symbols_After_Fano_Encoding}" \
                      f"\n\n{'平均码长:'}\n{Aver_len_F}\n\n{'信源的信息熵:'}\n{Info_Entropy_F}\n\n{'编码效率:'}\n{Encoding_Efficiency_F}"
        self.Output_textbrowser.setText(output_text)

    def retranslateUi(self, UI_Fano):
        _translate = QtCore.QCoreApplication.translate
        UI_Fano.setWindowTitle(_translate("UI_Fano", "UI_Fano"))
        self.TITLE.setText(_translate("UI_Fano", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">Fano编码</span></p><p align=\"center\"><span style=\" font-size:16pt;\">任意Q符号信源的二进制编码</span></p><p><br/></p></body></html>"))
        self.Back_to_Start_button.setText(_translate("UI_Fano", "返回到初始界面"))
        self.Input_Symbol_textedit.setHtml(_translate("UI_Fano", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Input_Q_hint.setText(_translate("UI_Fano", "<html><head/><body><p>在这里输入符号</p><p>注意符号长度:Q &gt;= 10</p></body></html>"))
        self.Generate_button.setText(_translate("UI_Fano", "Generate"))
        self.Output_hint.setText(_translate("UI_Fano", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\">运行结果</span></p></body></html>"))

def sort_symbol(Symbols):
    symbol_counts = Counter(Symbols)
    # 计算总字母数
    total_symbols = len(Symbols)
    # 计算每个字母的概率
    symbol_probabilities = [[symbol, count / total_symbols] for symbol, count in symbol_counts.items()]
    # 从大到小排序
    symbol_probabilities = sorted(symbol_probabilities, key=lambda x: x[1], reverse=True)
    return symbol_probabilities

